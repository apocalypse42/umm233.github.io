<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Seeno</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://umm233.github.io/"/>
  <updated>2019-02-09T13:47:22.917Z</updated>
  <id>https://umm233.github.io/</id>
  
  <author>
    <name>Seeno</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Blog back up</title>
    <link href="https://umm233.github.io/p/cbef7cfa/"/>
    <id>https://umm233.github.io/p/cbef7cfa/</id>
    <published>2019-02-09T13:15:28.000Z</published>
    <updated>2019-02-09T13:47:22.917Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Update NexT</title>
    <link href="https://umm233.github.io/p/b601309c/"/>
    <id>https://umm233.github.io/p/b601309c/</id>
    <published>2019-02-05T05:30:13.000Z</published>
    <updated>2019-02-05T12:05:41.828Z</updated>
    
    <content type="html"><![CDATA[<p>刚发现自己用的是NexT v5.1.4，枯了…<br>更新后直接是v7.0.0，好用多了/鬼脸</p><a id="more"></a><h2 id="NexT版本更新说明"><a href="#NexT版本更新说明" class="headerlink" title="NexT版本更新说明"></a>NexT版本更新说明</h2><p>稍微了解一下，以下说明来自参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2Jsb2IvbWFzdGVyL2RvY3MvemgtQ04vVVBEQVRFLUZST00tNS4xLlgubWQ=" title="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md">官方文档<i class="fa fa-external-link"></i></span></p><p>在 5.1.x 版本和 6.0.x 版本之间没有很大的革命性改进。主版本号变更至 6 主要是因为：</p><ol><li>主仓库已从 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0" title="https://github.com/iissnan/hexo-theme-next">iissnan 名下<i class="fa fa-external-link"></i></span> 迁移至 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQ=" title="https://github.com/theme-next">theme-next<i class="fa fa-external-link"></i></span> 组织。</li><li><code>next/source/lib</code> 目录下的绝大多数库被移出到了 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQ=" title="https://github.com/theme-next">NexT 组织的外部仓库<i class="fa fa-external-link"></i></span>中。</li><li>第三方插件 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dpbGxpbi9oZXhvLXdvcmRjb3VudA==" title="https://github.com/willin/hexo-wordcount"><code>hexo-wordcount</code><i class="fa fa-external-link"></i></span> 被 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by1zeW1ib2xzLWNvdW50LXRpbWU=" title="https://github.com/theme-next/hexo-symbols-count-time"><code>hexo-symbols-count-time</code><i class="fa fa-external-link"></i></span> 所取代，因为 <code>hexo-symbols-count-time</code> 没有任何外部 nodejs 依赖、也没有会导致生成站点时的性能问题 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dpbGxpbi9oZXhvLXdvcmRjb3VudC9pc3N1ZXMvNw==" title="https://github.com/willin/hexo-wordcount/issues/7">language filter<i class="fa fa-external-link"></i></span>。</li></ol><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>其实说更新，实际上就是新建一个博客主题。一下引自官方迁移文档 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2Jsb2IvbWFzdGVyL2RvY3MvemgtQ04vVVBEQVRFLUZST00tNS4xLlgubWQ=" title="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md">UPDATE-FROM-5.1.X.md<i class="fa fa-external-link"></i></span></p><ol><li>克隆新的 v6.x 仓库到任一异于 <code>next</code> 的目录（如 <code>next-reloaded</code>）：</li></ol><p><code>$ git clone https://github.com/theme-next/hexo-theme-next themes/next-reloaded</code></p><ol start="2"><li><p>在 Hexo 的主配置文件中设置主题：</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next-reloaded</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure></li><li><p>更新语言配置</p><p> 从 v6.0.3版本起，<code>zh-Hans</code>改名为<code>zh-CN</code>：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L3JlbGVhc2VzL3RhZy92Ni4wLjM=" title="https://github.com/theme-next/hexo-theme-next/releases/tag/v6.0.3">https://github.com/theme-next/hexo-theme-next/releases/tag/v6.0.3<i class="fa fa-external-link"></i></span></p><p> 升级到v6.0.3及以后版本的用户，需要显式修改<code>_config.xml</code>里的language配置，否则语言显示不正确。</p></li></ol><p>关于第三方库的启用，参见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2Jsb2IvbWFzdGVyL2RvY3MvemgtQ04vSU5TVEFMTEFUSU9OLm1kI+aPkuS7tg==" title="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/INSTALLATION.md#插件">这里<i class="fa fa-external-link"></i></span>。</p><h2 id="配置NexT"><a href="#配置NexT" class="headerlink" title="配置NexT"></a>配置NexT</h2><p>更新前，配置主题大部分要去下相关插件去修改对应的文件，很麻烦。<br>更新后，大部分功能内置，只需要根据个人喜好打开相应功能开关，即 <code>false</code> -&gt; <code>true</code>。</p><p>eg.<br>字数统计: 修改 <code>symbols_count_time</code>下的选项<br>标签图标: 修改<code>favicon</code>下的选项<br>博客页脚: 修改<code>footer</code>下的选项</p><p>NexT的配置文件<code>_config.yml</code>里有大量的注释，以及各插件/第三方库的开源地址，查看其<code>readme</code>（也很详细），然后自己跟着动手配置就ok了。</p><p>要注意的是，一些插件/第三方库并没有预置，要自己安装。否则，可能在预览站点的时候可能因为使用了第三方库的某些功能，但却未添加该库使得站点无法加载完全/失败。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>NexT折腾啊折腾，刚开始用v5.1.x折腾好久，而更新后，折腾一两个小时就配置好，舒服舒服🙃🙃🙃</p><blockquote class="blockquote-center"><p>新年快乐~<br>——2019.02.05</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚发现自己用的是NexT v5.1.4，枯了…&lt;br&gt;更新后直接是v7.0.0，好用多了/鬼脸&lt;/p&gt;
    
    </summary>
    
      <category term="博客美化" scheme="https://umm233.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    
    
      <category term="Hexo" scheme="https://umm233.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://umm233.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo writing</title>
    <link href="https://umm233.github.io/p/cb3898/"/>
    <id>https://umm233.github.io/p/cb3898/</id>
    <published>2019-02-02T11:44:42.000Z</published>
    <updated>2019-02-05T07:40:05.429Z</updated>
    
    <content type="html"><![CDATA[<p>关于Hexo写作的一些笔记。</p><a id="more"></a><h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h2><blockquote><p>Hexo内主要使用Markdown进行写作。</p></blockquote><p>关于Markdown的语法，这里就记录一些常用的。</p><ul><li>n级标题  <code>n*#</code>   eg. 二级标题 ## blah</li><li>删除线  <code>~~blah~~</code> -&gt; <del>blah</del></li><li>加粗  <code>**blah**</code> -&gt; <strong>blah</strong></li><li>斜体  <code>*blah*</code> -&gt; <em>blah</em></li><li>短代码段 `blah`<br>效果：  <code>blah</code></li><li>多行代码段<br>```<br>blah<br>blah<br>blah<br>```</li></ul><p>效果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">blah</span><br><span class="line">blah</span><br><span class="line">blah</span><br></pre></td></tr></table></figure></p><h2 id="特殊语法-内置标签"><a href="#特殊语法-内置标签" class="headerlink" title="特殊语法(内置标签)"></a>特殊语法(内置标签)</h2><blockquote><p>「标签」(Tag Plugin) 是 Hexo 提供的一种快速生成特定内容的方式。</p></blockquote><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img filename picname %&#125;</span><br><span class="line">eg.&#123;% asset_img test.png test %&#125;</span><br></pre></td></tr></table></figure><p>效果如下:<br><img src="/p/cb3898/test.png" title="test"></p><h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% code 附加说明 link title %&#125;</span><br><span class="line">code blah blah</span><br><span class="line">&#123;% endcode %&#125;</span><br><span class="line"></span><br><span class="line">eg</span><br><span class="line">&#123;% code 此为附加说明 https://hexo.io/zh-cn/docs/tag-plugins#%E4%BB%A3%E7%A0%81%E5%9D%97 标签插件（Tag Plugins）%&#125;</span><br><span class="line">code code blah blah</span><br><span class="line">&#123;% endcode %&#125;</span><br></pre></td></tr></table></figure><p>效果如下:<br><figure class="highlight plain"><figcaption><span>此为附加说明</span><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvdGFnLXBsdWdpbnMjJUU0JUJCJUEzJUU3JUEwJTgxJUU1JTlEJTk3" title="https://hexo.io/zh-cn/docs/tag-plugins#%E4%BB%A3%E7%A0%81%E5%9D%97">标签插件（Tag Plugins）<i class="fa fa-external-link"></i></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code code blah blah</span><br></pre></td></tr></table></figure></p><h3 id="引用（别名：quote）"><a href="#引用（别名：quote）" class="headerlink" title="引用（别名：quote）"></a>引用（别名：quote）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% quote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endquote %&#125;</span><br><span class="line"></span><br><span class="line">eg. 引用书上的句子</span><br><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br><span class="line"></span><br><span class="line">eg. 引用文本加链接</span><br><span class="line">&#123;% quote 沃斯基·索德 https://music.163.com/#/mv?id=29689 A Thousand Years %&#125;</span><br><span class="line">It is a test. Link is a MV.</span><br><span class="line">&#123;% endquote %&#125;</span><br></pre></td></tr></table></figure><p>效果如下:<br>eg. 引用书上的句子<br><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote></p><p>eg. 引用文本加链接<br><blockquote><p>It is a test. Link is a MV.</p><footer><strong>沃斯基·索德</strong><cite><span class="exturl" data-url="aHR0cHM6Ly9tdXNpYy4xNjMuY29tLyMvbXY/aWQ9Mjk2ODk=" title="https://music.163.com/#/mv?id=29689">A Thousand Years<i class="fa fa-external-link"></i></span></cite></footer></blockquote></p><h3 id="居中引用"><a href="#居中引用" class="headerlink" title="居中引用"></a>居中引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% cq %&#125; </span><br><span class="line">blah blah blah </span><br><span class="line">——沃斯基·索德</span><br><span class="line">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote class="blockquote-center"><p>blah blah blah<br>——沃斯基·索德</p></blockquote><h3 id="Bootstrap-Callout"><a href="#Bootstrap-Callout" class="headerlink" title="Bootstrap Callout"></a>Bootstrap Callout</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note class_name %&#125; </span><br><span class="line">Content (md partial supported) </span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">class name:</span><br><span class="line">*   `default`</span><br><span class="line">*   `primary`</span><br><span class="line">*   `success`</span><br><span class="line">*   `info`</span><br><span class="line">*   `warning`</span><br><span class="line">*   `danger`</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>primary</li></ol><div class="note primary">            <p>Content (md partial supported) </p>          </div><ol start="2"><li>success</li></ol><div class="note success">            <p>Content (md partial supported) </p>          </div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p><code>&lt;u&gt;blah&lt;/u&gt;</code> -&gt; <u>blah</u></p><h3 id="跳转页面"><a href="#跳转页面" class="headerlink" title="跳转页面"></a>跳转页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[使用Markdown语法增加的跳转到“前言”的链接](#Markdown语法)</span><br></pre></td></tr></table></figure><p>效果：<a href="#Markdown语法">跳转到文章”Markdown语法”标题处</a></p><h3 id="Read-More"><a href="#Read-More" class="headerlink" title="Read More"></a>Read More</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><h3 id="文字链接"><a href="#文字链接" class="headerlink" title="文字链接"></a>文字链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[title](link)</span><br><span class="line"></span><br><span class="line">eg.</span><br><span class="line">`[Hexo官方教程](https://hexo.io/zh-cn/docs/tag-plugins)`</span><br></pre></td></tr></table></figure><p>效果如下:<br><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvdGFnLXBsdWdpbnM=" title="https://hexo.io/zh-cn/docs/tag-plugins">Hexo官方教程<i class="fa fa-external-link"></i></span></p><h3 id="嵌入Youtube视频"><a href="#嵌入Youtube视频" class="headerlink" title="嵌入Youtube视频"></a>嵌入Youtube视频</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youtube video_id %&#125;</span><br><span class="line">eg. &#123;% youtube rtOvBOTyX00 %&#125;</span><br></pre></td></tr></table></figure><p>效果如下:<br><div class="video-container"><iframe src="//www.youtube.com/embed/rtOvBOTyX00" frameborder="0" allowfullscreen></iframe></div></p><p>效果图:<br><img src="/p/cb3898/youtube-pic.png" title="看不到视频看效果图"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上这些对于日常写作基本够用，后面需要什么再学，再记录，持续更新。</p><p>ps. 今年时间进度 ▓░░░░░░░░░░░░░░ 9%</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvdGFnLXBsdWdpbnMjaWZyYW1l" title="https://hexo.io/zh-cn/docs/tag-plugins#iframe">Hexo tag-plugins教程<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lmlpc3NuYW4uY29tL3RhZy1wbHVnaW5zLmh0bWw=" title="https://theme-next.iissnan.com/tag-plugins.html">NexT tag-plugins教程<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Hexo写作的一些笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://umm233.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://umm233.github.io/tags/Hexo/"/>
    
      <category term="写作" scheme="https://umm233.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="笔记" scheme="https://umm233.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>爬取探书FM-每天听本书</title>
    <link href="https://umm233.github.io/p/e09d667/"/>
    <id>https://umm233.github.io/p/e09d667/</id>
    <published>2019-01-11T14:00:38.000Z</published>
    <updated>2019-01-19T09:22:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>闲的…刚好想听听书，初略了解一下整书内容，或是听听以前看过的书，了解一下别人对这本书的理解及看法。<br>看到有人推荐探书FM，一天一书，还行。<br>ps.「得到」也有一个栏目叫「每天听本书」，可是只能付费，so…<br>其实就是闲着想写个爬虫练练手而已。</p><a id="more"></a><h2 id="查找api"><a href="#查找api" class="headerlink" title="查找api"></a>查找api</h2><p>通过浏览器审查元素获取该页面的<code>webapi</code></p><blockquote><p>具体就是<code>F12</code>-&gt; <code>Network</code> -&gt;<code>刷新页面</code></p></blockquote><p>得到webapi，api查询返回数据中的dataList中存放者音频数据，包括文件名，各种格式音频链接，有mp3，aac等格式。</p><p>api链接：<span class="exturl" data-url="aHR0cDovL3d3dy50aW5nYmFuLmNuL3dlYmFwaS9hdWRpb3MvbGlzdD9pZD0xMTAwMDAxNDc1Nzc2JmFtcDtwYWdlc2l6ZT0yMCZhbXA7cGFnZW51bT17cGFnZW51bX0mYW1wO3NvcnR0eXBlPTE=" title="http://www.tingban.cn/webapi/audios/list?id=1100001475776&amp;pagesize=20&amp;pagenum={pagenum}&amp;sorttype=1">http://www.tingban.cn/webapi/audios/list?id=1100001475776&amp;pagesize=20&amp;pagenum={pagenum}&amp;sorttype=1<i class="fa fa-external-link"></i></span></p><blockquote><p>pagenum 页数<br>pagesize 每页返回音频数（可修改，在0-50之间）</p></blockquote><img src="/p/e09d667/api页面.png" title="api页面"><h2 id="获取音频名及链接"><a href="#获取音频名及链接" class="headerlink" title="获取音频名及链接"></a>获取音频名及链接</h2><p>这里建立一个字典用于存放音频(key)和对应的链接(value)<br>对返回的json数据进行处理即可。（有api就是很舒服的一件事）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_json</span><span class="params">(resp)</span>:</span> <span class="comment"># resp为请求页面返回的响应(respond)</span></span><br><span class="line">    url_single_list = []</span><br><span class="line">    audioName_list = []</span><br><span class="line">    download_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> resp.text: <span class="comment"># 页面有数据才进行操作</span></span><br><span class="line">        url_fmdata = resp.content.decode(<span class="string">'utf-8'</span>) <span class="comment"># 对返回数据进行utf-8编码</span></span><br><span class="line">        result = json.loads(url_fmdata).get(<span class="string">"result"</span>)</span><br><span class="line">        <span class="comment"># print(type(result))</span></span><br><span class="line">        dataList = result[<span class="string">"dataList"</span>] <span class="comment"># 所有音频数据</span></span><br><span class="line">        <span class="comment"># print(len(dataList))</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> dataList:</span><br><span class="line">            url_single = data[<span class="string">'aacPlayUrl'</span>] <span class="comment"># 这里下载aac文件，因为小</span></span><br><span class="line">            audioName = data[<span class="string">"audioName"</span>]</span><br><span class="line">            <span class="comment"># print(url_single)</span></span><br><span class="line">            <span class="comment"># print(audioName)</span></span><br><span class="line">            url_single_list.append(url_single)</span><br><span class="line">            audioName_list.append(audioName)</span><br><span class="line">        single_data = zip(audioName_list, url_single_list)</span><br><span class="line">        download_dict.update(single_data) <span class="comment"># 获得此页面音频名及链接</span></span><br><span class="line">        <span class="comment"># print(download_dict)</span></span><br><span class="line">        <span class="keyword">return</span> download_dict</span><br></pre></td></tr></table></figure><h2 id="多线程下载音频"><a href="#多线程下载音频" class="headerlink" title="多线程下载音频"></a>多线程下载音频</h2><blockquote><p>通过多线程下载可提高下载速率。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">thread_lock = threading.BoundedSemaphore(value = <span class="number">5</span>) <span class="comment"># 设置5个线程</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_mp3</span><span class="params">(url,download_name,n)</span>:</span></span><br><span class="line">    path = <span class="string">'fm-mp3/'</span>+ download_name + url[<span class="number">-4</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path): <span class="comment"># 防止程序中断后覆盖下载</span></span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        <span class="keyword">with</span> open(path,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(r.content)</span><br><span class="line">    thread_lock.release()  <span class="comment"># 下载完解锁</span></span><br><span class="line">    print(<span class="string">"%d is ok"</span> %n)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    download_list_all = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> page_num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">15</span>): <span class="comment"># max = 14 # 在pagesize=20的情况下一共14页数据</span></span><br><span class="line">        url = <span class="string">"http://www.tingban.cn/webapi/audios/list?id=1100001475776&amp;pagesize=20&amp;pagenum=&#123;i&#125;&amp;sorttype=1"</span>.format(i=page_num) <span class="comment"># 设置api链接，修改页数，这里默认20，最大可修改为50</span></span><br><span class="line">        resp = get_html(url)</span><br><span class="line">        url_list = data_json(resp)</span><br><span class="line">        <span class="comment"># print(url_list)</span></span><br><span class="line">        download_list_all.update(url_list)</span><br><span class="line">    <span class="comment"># print(download_list_all)</span></span><br><span class="line">    all_url_name = list(download_list_all.keys()) <span class="comment"># 所有的文件名，type：list</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_url_name)):</span><br><span class="line">        download_name = all_url_name[n]</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        url = download_list_all[download_name] <span class="comment"># 待下载的音频链接</span></span><br><span class="line">        print(<span class="string">'download &#123;&#125;'</span>.format(download_name))</span><br><span class="line">        path = <span class="string">'fm-mp3/'</span>+ download_name + url[<span class="number">-4</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            thread_lock.acquire()</span><br><span class="line">            t = threading.Thread(target = download_mp3,args = (url,download_name,n))</span><br><span class="line">            t.start()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"%d is ok"</span> %n)</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>基本思路：音频url-&gt;下载音频<br>url：通过api获得,整理成字典以便下载<br>下载：通过多线程提高下载速度<br>ps.通过判断文件是否存在实现「伪·断点下载」</p><p>程序开源在Github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VtbTIzMy9UYW5zaHVGTS1TcGlkZXIvYmxvYi9tYXN0ZXIvZ2V0X2ZtLnB5" title="https://github.com/umm233/TanshuFM-Spider/blob/master/get_fm.py">探书FM爬虫<i class="fa fa-external-link"></i></span></p><blockquote><p>说起来整个程序也就是在做这两件事，看起来很简单，但实际真的动手写会遇到一些问题，基本上是基础知识方面，久不用就会忘记忽略。</p><p>对于页数可以稍微优化成通过判断<br>数据是否为寇空来判断是否到尾页</p></blockquote><h2 id="今年时间进度"><a href="#今年时间进度" class="headerlink" title="今年时间进度"></a>今年时间进度</h2><p>今年还剩下 353 天   ░░░░░░░░░░░░░░░   3%</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闲的…刚好想听听书，初略了解一下整书内容，或是听听以前看过的书，了解一下别人对这本书的理解及看法。&lt;br&gt;看到有人推荐探书FM，一天一书，还行。&lt;br&gt;ps.「得到」也有一个栏目叫「每天听本书」，可是只能付费，so…&lt;br&gt;其实就是闲着想写个爬虫练练手而已。&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://umm233.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="https://umm233.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="https://umm233.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>8102的最后一天</title>
    <link href="https://umm233.github.io/p/6ad40d1c/"/>
    <id>https://umm233.github.io/p/6ad40d1c/</id>
    <published>2018-12-31T04:14:00.000Z</published>
    <updated>2019-01-19T02:47:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年也许是大学里最开心的一年，也是相对充实的一年。</p><a id="more"></a><p>今年最佳</p><blockquote><p>8.23 国赛</p></blockquote><p>当时准备国赛，和队友熬了好多夜，苦不堪言。现在回忆起来，蛮感谢队友们一直坚持下去。（还有点怀念那段时光…orz</p><blockquote><p>10.1~10.7 同学叙旧</p></blockquote><p>国庆期间见了好几个高中同学，毕业后就很少见到了。国庆那会儿跑去找他们玩，一起瞎逛，聊天，互相吐槽，爆以前黑料等等，属于见了面就“嫌弃”…但，还是很亲切。</p><blockquote><p>12月 – 万万没想到</p></blockquote><p>今年的生日赶巧和另外一个同学一起过，是大学里非常佩服的一个人，感觉很神奇！那天晚上很开心，帮我们一起过生日的女孩子事后跟我说，我晚上笑的很开心😂。</p><p>嗯，是很开心了！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年也许是大学里最开心的一年，也是相对充实的一年。&lt;/p&gt;
    
    </summary>
    
      <category term="碎碎念" scheme="https://umm233.github.io/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="随想" scheme="https://umm233.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Image Compressor</title>
    <link href="https://umm233.github.io/p/c00bdf6b/"/>
    <id>https://umm233.github.io/p/c00bdf6b/</id>
    <published>2018-12-28T08:35:55.000Z</published>
    <updated>2019-02-05T05:15:51.907Z</updated>
    
    <content type="html"><![CDATA[<p>经常会有关于图像压缩的需求，稍微整理及记录一下常用方法…</p><a id="more"></a><h2 id="ImageMagick"><a href="#ImageMagick" class="headerlink" title="ImageMagick"></a>ImageMagick</h2><h3 id="ImageMagick简介"><a href="#ImageMagick简介" class="headerlink" title="ImageMagick简介"></a>ImageMagick简介</h3><blockquote><p>ImageMagick是一个用于查看、编辑位图文件以及进行图像格式转换的开放源代码软件套装。它可以读取、编辑超过100种图象格式。——<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSW1hZ2VNYWdpY2s=" title="https://zh.wikipedia.org/wiki/ImageMagick">维基百科<i class="fa fa-external-link"></i></span></p><p>官网：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaW1hZ2VtYWdpY2sub3JnL3NjcmlwdC9pbmRleC5waHA=" title="https://www.imagemagick.org/script/index.php">https://www.imagemagick.org/script/index.php<i class="fa fa-external-link"></i></span><br>下载安装：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaW1hZ2VtYWdpY2sub3JnL3NjcmlwdC9kb3dubG9hZC5waHA=" title="https://www.imagemagick.org/script/download.php">https://www.imagemagick.org/script/download.php<i class="fa fa-external-link"></i></span></p></blockquote><p>在下载页面选择合适版本下载安装。<br>ps. Windows建议下载安装版，避免一些命令如<code>convert</code>等无法正常使用的情况。</p><h3 id="ImageMagick使用"><a href="#ImageMagick使用" class="headerlink" title="ImageMagick使用"></a>ImageMagick使用</h3><p>仅记录常用的压缩使用，ImageMagick很强大，如果要写，一篇文章写不完的👀。</p><p>压缩gif/jpg/png，原图品质降为75%左右(降太多会导致图像严重失真)，下面以gif格式为例。测试gif大小可以缩到原图的1/3~1/2。<br>ps.可以重复操作几次，但一般两次后大小就不会再减小了。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">convert</span> -quality <span class="number">75</span>% input.gif output.gif</span><br></pre></td></tr></table></figure><h2 id="Pngyu"><a href="#Pngyu" class="headerlink" title="Pngyu"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL251a2VzYXE4OC9Qbmd5dQ==" title="https://github.com/nukesaq88/Pngyu">Pngyu<i class="fa fa-external-link"></i></span></h2><ul><li>可进行批量处理</li><li>开源</li></ul><p>Github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL251a2VzYXE4OC9Qbmd5dQ==" title="https://github.com/nukesaq88/Pngyu">https://github.com/nukesaq88/Pngyu<i class="fa fa-external-link"></i></span></p><h2 id="在线图片压缩"><a href="#在线图片压缩" class="headerlink" title="在线图片压缩"></a>在线图片压缩</h2><h3 id="Squoosh"><a href="#Squoosh" class="headerlink" title="Squoosh"></a><span class="exturl" data-url="aHR0cHM6Ly9zcXVvb3NoLmFwcC8=" title="https://squoosh.app/">Squoosh<i class="fa fa-external-link"></i></span></h3><ul><li>由GoogleChromeLabs开发，开源</li><li>等待网页加载完会显示<code>ready to work offline</code>，意思就是加载完后你可以离线使用！</li><li>不限制压缩图片大小</li></ul><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9zcXVvb3NoLmFwcA==" title="https://squoosh.app">Squoosh<i class="fa fa-external-link"></i></span> is an image compression web app that allows you to dive into the advanced options provided by various image compressors.</p></blockquote><p>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNocm9tZUxhYnMvc3F1b29zaA==" title="https://github.com/GoogleChromeLabs/squoosh">https://github.com/GoogleChromeLabs/squoosh<i class="fa fa-external-link"></i></span></p><h3 id="iloveimg"><a href="#iloveimg" class="headerlink" title="iloveimg"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cuaWxvdmVpbWcuY29tL3poLWNuL2NvbXByZXNzLWltYWdl" title="https://www.iloveimg.com/zh-cn/compress-image">iloveimg<i class="fa fa-external-link"></i></span></h3><ul><li>不限制图片大小（这个很棒!）</li><li>压缩后大小，质量都还不错</li><li>支持批量压缩（不过要等好一会，压缩完会提示下载）</li></ul><h3 id="Tinypng"><a href="#Tinypng" class="headerlink" title="Tinypng"></a><span class="exturl" data-url="aHR0cHM6Ly90aW55cG5nLmNvbS8=" title="https://tinypng.com/">Tinypng<i class="fa fa-external-link"></i></span></h3><ul><li>仅支持<code>png</code>、<code>jpg</code>格式</li><li>支持批量操作20张图片，每张最大不超过5MB</li></ul><blockquote><p>Up to 20 images, max 5 MB each</p></blockquote><p>btw: ▓▓▓▓▓▓▓▓▓▓▓▓▓▓░  99%<br>      ——今年时间进度(皮一下</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经常会有关于图像压缩的需求，稍微整理及记录一下常用方法…&lt;/p&gt;
    
    </summary>
    
      <category term="图像处理" scheme="https://umm233.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="图像" scheme="https://umm233.github.io/tags/%E5%9B%BE%E5%83%8F/"/>
    
      <category term="压缩" scheme="https://umm233.github.io/tags/%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>github commit时间分析</title>
    <link href="https://umm233.github.io/p/5c5365ec/"/>
    <id>https://umm233.github.io/p/5c5365ec/</id>
    <published>2018-12-18T14:47:24.000Z</published>
    <updated>2019-01-19T09:21:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前没怎么接触api，最近分析了一下关于GitHub用户的<code>commit</code>时间，初步得出关于该用户的<code>commit</code>时间规律等等。（ 事前查了一下，网上大部分关于GitHub上数据分析的文章推荐使用官方提供的api: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My8=" title="https://developer.github.com/v3/">GitHub Developer<i class="fa fa-external-link"></i></span></p><a id="more"></a><h2 id="API调用"><a href="#API调用" class="headerlink" title="API调用"></a>API调用</h2><p>对于Github上用户 所有提交的<code>commmit</code>，通过遍历其每个仓库的<code>commit</code>得到。</p><h3 id="某用户所有的仓库"><a href="#某用户所有的仓库" class="headerlink" title="某用户所有的仓库"></a>某用户所有的仓库</h3><p>链接格式：<code>https://api.github.com/users/{username}/repos</code></p><blockquote><p>具体使用可参考：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy8jbGlzdC11c2VyLXJlcG9zaXRvcmllcw==" title="https://developer.github.com/v3/repos/#list-user-repositories">List user repositories<i class="fa fa-external-link"></i></span></p></blockquote><h3 id="单个仓库的commits"><a href="#单个仓库的commits" class="headerlink" title="单个仓库的commits"></a>单个仓库的commits</h3><p>链接格式：<code>https://api.github.com/repos/{owner}/{repo}/commits</code></p><p>注意：commits后面不能加<code>/</code>，因为加<code>/</code>后面要到<code>SHA</code>值，否则，会出现 <code>&quot;No commit found for SHA: &quot;</code>的错误。</p><blockquote><p>具体使用可参考：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9jb21taXRzLyNnZXQtYS1zaW5nbGUtY29tbWl0" title="https://developer.github.com/v3/repos/commits/#get-a-single-commit">get-a-single-commit<i class="fa fa-external-link"></i></span></p><p>调用api后返回整整齐齐的json数据，在其中对于json数据操作就可以得到想要的信息。<br>完整api文档/教程可参考：<br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My8=" title="https://developer.github.com/v3/">GitHub Developer v3 API文档<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9ndWlkZXMvZ2V0dGluZy1zdGFydGVkLw==" title="https://developer.github.com/v3/guides/getting-started/">GitHub Developer v3 API教程<i class="fa fa-external-link"></i></span></p></blockquote><h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><h3 id="获取API返回内容"><a href="#获取API返回内容" class="headerlink" title="获取API返回内容"></a>获取API返回内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(url)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1'</span>&#125;</span><br><span class="line">    html = requests.get(url, headers=headers) <span class="comment"># 发送请求</span></span><br><span class="line">    <span class="keyword">if</span> html.status_code == <span class="number">200</span>: <span class="comment"># 判断请求是否成功</span></span><br><span class="line">        <span class="comment"># print(html)</span></span><br><span class="line">        <span class="keyword">return</span> html.content <span class="comment"># 返回网页内容</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h3 id="获取某用户所有的repo-name。"><a href="#获取某用户所有的repo-name。" class="headerlink" title="获取某用户所有的repo name。"></a>获取某用户所有的repo name。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_repo</span><span class="params">(name)</span>:</span> <span class="comment"># 某人所有的repo</span></span><br><span class="line">    url_repos = <span class="string">'https://api.github.com/users/&#123;name&#125;/repos'</span>.format(name=name)</span><br><span class="line">    html = get_data(url_repos)</span><br><span class="line"></span><br><span class="line">    json_data = json.loads(html)</span><br><span class="line">    <span class="comment"># json_data里储存的是html下的所有数据</span></span><br><span class="line">    all_repos = [] <span class="comment"># repos's name数据存放数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> json_data:</span><br><span class="line">            repo = item[<span class="string">'name'</span>]</span><br><span class="line">            all_repos.append(repo)</span><br><span class="line">        print(all_repos) <span class="comment"># 某用户的所有repo列表</span></span><br><span class="line">        print( <span class="string">"the %s totally has %d repos"</span> %(name,len(all_repos)) )</span><br><span class="line">        <span class="keyword">return</span> name,all_repos</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br></pre></td></tr></table></figure><h3 id="获取repo下作者的commit时间"><a href="#获取repo下作者的commit时间" class="headerlink" title="获取repo下作者的commit时间"></a>获取repo下作者的commit时间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_data</span><span class="params">(html)</span>:</span></span><br><span class="line">    json_data = json.loads(html) <span class="comment"># json_data里储存的是html下的所有数据</span></span><br><span class="line">    commit_date_all = [] <span class="comment"># commits date数据存放数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> json_data:</span><br><span class="line">            commits = item[<span class="string">'commit'</span>][<span class="string">'committer'</span>]</span><br><span class="line">            commit_date_all.append(commits[<span class="string">'date'</span>])</span><br><span class="line">            <span class="comment"># print(commit_date_all)</span></span><br><span class="line">        <span class="keyword">return</span> commit_date_all</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure><h2 id="代理ip"><a href="#代理ip" class="headerlink" title="代理ip"></a>代理ip</h2><p>下面那篇文章写的很详细了，以供记录参考。</p><blockquote><p>btw: 原来是写了加上代理ip去调用api，但是还是会被限制，可能打开方式不对。</p><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xhbW1vbnBldGVyL2FydGljbGUvZGV0YWlscy81MjkxNzI2NA==" title="https://blog.csdn.net/lammonpeter/article/details/52917264">Python爬虫技巧—设置代理IP<i class="fa fa-external-link"></i></span><br>IP地址取自国内髙匿代理IP网站：<span class="exturl" data-url="aHR0cDovL3d3dy54aWNpZGFpbGkuY29tL25uLw==" title="http://www.xicidaili.com/nn/">http://www.xicidaili.com/nn/<i class="fa fa-external-link"></i></span></p></blockquote><h2 id="planB"><a href="#planB" class="headerlink" title="planB"></a>planB</h2><blockquote><p>re分析Github commit页面获取所有GitHub commmit时间</p></blockquote><h3 id="获取仓库commit-sha"><a href="#获取仓库commit-sha" class="headerlink" title="获取仓库commit sha"></a>获取仓库commit sha</h3><p>GitHub个人仓库的<code>commit</code> url的构成如下，每个repo都对应一个commit sha值，后面的num是一页的<code>commit</code>数，一页有35个，从1开始，每页加34。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/&#123;user&#125;/&#123;repo_name&#125;/commits/master?after=&#123;commit_sha&#125;+&#123;num&#125;</span><br></pre></td></tr></table></figure><p>通过分析页面元素，利用re简单提取commit sha</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sha</span><span class="params">(user, repo_name)</span>:</span> <span class="comment"># 用户的每个repo对应一个commit sha</span></span><br><span class="line">    url = <span class="string">"https://github.com/&#123;user&#125;/&#123;repo_name&#125;/commits/master"</span>.format(user=user, repo_name=repo_name)</span><br><span class="line">    html = get_html(url)</span><br><span class="line">    commit_sha = re.findall(<span class="string">r'href="https://github.com/.*commit/(.*?)"'</span>, html)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> commit_sha</span><br></pre></td></tr></table></figure><h3 id="获取某用户所有repo"><a href="#获取某用户所有repo" class="headerlink" title="获取某用户所有repo"></a>获取某用户所有repo</h3><p>通过遍历一个人在所有的repo下的commit时间，来实现获取一个人所有的<code>commit</code>时间。<br>方法也是通过分析页面元素，利用re简单提取所有的仓库名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_repo</span><span class="params">(user)</span>:</span></span><br><span class="line">    url = <span class="string">'https://github.com/&#123;user&#125;'</span>.format(user=user)</span><br><span class="line">    html = get_html(url)</span><br><span class="line">    all_repo = re.findall(<span class="string">r'&lt;span class="repo js-repo" title="(.*)"'</span>, html)</span><br><span class="line">    <span class="keyword">return</span> all_repo</span><br></pre></td></tr></table></figure><h3 id="获取某repo下的所有commit时间"><a href="#获取某repo下的所有commit时间" class="headerlink" title="获取某repo下的所有commit时间"></a>获取某repo下的所有commit时间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_repo_commits</span><span class="params">(user, repo_name)</span>:</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    page_flag = <span class="number">66</span> <span class="comment"># 设置页面初始标志,用于判断是否到达末页</span></span><br><span class="line">    page_num = <span class="number">0</span></span><br><span class="line">    data_num = <span class="number">0</span></span><br><span class="line">    commit_sha = get_sha(user, repo_name)</span><br><span class="line">    all_date = [] <span class="comment"># 储存时间数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (page_flag <span class="keyword">and</span> page_num&lt;<span class="number">5</span>): <span class="comment"># 测试前五页</span></span><br><span class="line">        url = <span class="string">"https://github.com/&#123;user&#125;/&#123;repo_name&#125;/commits/master?after=&#123;commit_sha&#125;+&#123;num&#125;"</span>.format(user=user, repo_name=repo_name, commit_sha=commit_sha, num=num) <span class="comment"># 构建链接</span></span><br><span class="line">        html = get_html(url) <span class="comment"># 获取页面内容</span></span><br><span class="line">        time_data = re.findall(<span class="string">r'&lt;relative-time datetime=(.*)&lt;/relative-time&gt;'</span>, html) <span class="comment"># re匹配时间元素</span></span><br><span class="line">        page_flag = len(time_data)</span><br><span class="line">        num = num + <span class="number">34</span> <span class="comment"># 进入下一页</span></span><br><span class="line">        page_num = page_num+<span class="number">1</span></span><br><span class="line">        data_num = data_num+len(time_data)</span><br><span class="line">        print(<span class="string">"page %d is ok\n get %d date"</span> % (page_num, len(time_data)))</span><br><span class="line">        <span class="keyword">for</span> date <span class="keyword">in</span> time_data:</span><br><span class="line">            all_date.append(date[<span class="number">1</span>:<span class="number">20</span>])</span><br><span class="line">        time.sleep(<span class="number">1</span>) <span class="comment"># 适当延时一下 单位：s</span></span><br><span class="line">    print(<span class="string">"the repo &lt;%s&gt; totally get %d commits'date"</span> % (repo_name, data_num))</span><br><span class="line">    <span class="keyword">return</span> all_date</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>对获取的时间数据进行简单的数据分析。</p><ul><li>统计一天内各时间段的出现频率，这个可以分析出某人的工作时间偏好等等。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hour_Hz</span><span class="params">()</span>:</span></span><br><span class="line">    datals = []</span><br><span class="line">    date_h = []</span><br><span class="line">    hour_count = &#123;&#125;</span><br><span class="line">    f = open(<span class="string">"commits.txt"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">        datals.append(i.split(<span class="string">","</span>))</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="comment"># datals[0]所有date的集合</span></span><br><span class="line">    dateall = datals[<span class="number">0</span>]</span><br><span class="line">    print(len(dateall))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(dateall)):</span><br><span class="line">        date_h.append((dateall[i][<span class="number">11</span>:<span class="number">13</span>]))</span><br><span class="line">    <span class="comment"># date_h是所有小时的集合</span></span><br><span class="line">    <span class="comment"># print(date_h)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> date_h:</span><br><span class="line">        hour_count[key] = hour_count.get(key, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="comment"># print (hour_count)</span></span><br><span class="line">    <span class="keyword">return</span> hour_count</span><br></pre></td></tr></table></figure><ul><li>绘制线性图更直观显示结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hour_Hz</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    datals = []</span><br><span class="line">    date_h = []</span><br><span class="line">    hour_count = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    f = open(file_path)   <span class="comment"># 对xx文本的分析</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">        datals.append(i.split(<span class="string">","</span>)) <span class="comment"># 文本格式分割形成列表</span></span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    dateall = datals[<span class="number">0</span>] <span class="comment"># datals[0]表示所有date的集合</span></span><br><span class="line">    <span class="comment"># print(len(dateall))</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(dateall)):</span><br><span class="line">        date_h.append((dateall[i][<span class="number">11</span>:<span class="number">13</span>])) <span class="comment"># 取时间hour部分 ps.date_h是所有小时的集合</span></span><br><span class="line">    <span class="comment"># print(date_h)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> date_h:</span><br><span class="line">        hour_count[key] = hour_count.get(key, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="comment"># print (hour_count)</span></span><br><span class="line">    <span class="keyword">return</span> hour_count</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hour_Hz_plot</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    hour_sort=[]</span><br><span class="line">    h_key_sort = []</span><br><span class="line"></span><br><span class="line">    hour_H = hour_Hz(file_path) <span class="comment">#得到时间分析数据，各时间的出现频率</span></span><br><span class="line">    h_key = list(hour_H.keys())</span><br><span class="line">    ind = np.arange(len(h_key)) <span class="comment"># 图表的x轴间隔</span></span><br><span class="line">    <span class="comment"># 整理数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(h_key)):</span><br><span class="line">        index = str(i) <span class="keyword">if</span> i&gt;<span class="number">9</span> <span class="keyword">else</span> <span class="string">'0'</span> + str(i)</span><br><span class="line">        hour_sort.append(hour_H[index]) <span class="comment"># 整理散乱顺序数据为00-23顺序</span></span><br><span class="line">        h_key_sort.append(i) <span class="comment"># 绘图时x轴刻度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘图</span></span><br><span class="line">    fig=plt.figure()</span><br><span class="line">    ax = fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    rects1 = ax.plot(ind, hour_sort, <span class="string">'r-'</span>, marker=<span class="string">'o'</span>) <span class="comment"># 设置图表参数</span></span><br><span class="line">    plt.xticks(np.arange(len(h_key)), h_key_sort) <span class="comment"># 画x轴标签</span></span><br><span class="line">    <span class="comment"># plt.show()</span></span><br></pre></td></tr></table></figure><p>效果如图：</p><img src="/p/5c5365ec/折线图.png" title="折线图"><ul><li>通过箱型图显示工作日</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weekday_2_box</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    datals = []</span><br><span class="line">    date_weekday = []</span><br><span class="line">    weekday_count = &#123;&#125;</span><br><span class="line">    f = open(file_path)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">        datals.append(i.split(<span class="string">","</span>))</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    dateall = datals[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># print(len(dateall))</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(dateall)):</span><br><span class="line">        weekday = datetime.strptime((dateall[i][<span class="number">0</span>:<span class="number">10</span>]),<span class="string">"%Y-%M-%d"</span>).weekday()+<span class="number">1</span></span><br><span class="line">        date_weekday.append(weekday)</span><br><span class="line">    all_weekday = date_weekday</span><br><span class="line">    <span class="comment"># print(all_weekday)</span></span><br><span class="line">    fig,ax = plt.subplots(figsize=(<span class="number">5</span>,<span class="number">3</span>))</span><br><span class="line">    plt.boxplot(all_weekday)</span><br><span class="line">    plt.title(<span class="string">'weekday boxplot'</span>)</span><br><span class="line">    plt.setp(ax,xticklabels=[<span class="string">'weekday'</span>])</span><br><span class="line">    plt.grid(<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>效果如图：</p><img src="/p/5c5365ec/箱型图.png" title="箱型图"><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>整体思路比较简单，也许Github比较善良(-:<br>所有commit时间数据 &lt; 所有repo的commit时间数据 &lt; 某个repo的所有commit时间数据 &lt; 单个repo某页commit时间数据</p><p>完整程序见Github：</p><ol><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VtbTIzMy9Db2RlLU5vdGUvYmxvYi9tYXN0ZXIvR2l0aHViLWNvbW1pdC10aW1lLXNwaWRlci5weQ==" title="https://github.com/umm233/Code-Note/blob/master/Github-commit-time-spider.py">Github用户commit数据爬取<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VtbTIzMy9Db2RlLU5vdGUvYmxvYi9tYXN0ZXIvR2l0aHViLWNvbW1pdC1hbmFseXNpcy5weQ==" title="https://github.com/umm233/Code-Note/blob/master/Github-commit-analysis.py">Github用户commit数据分析<i class="fa fa-external-link"></i></span></li></ol><p>今年时间进度：▓▓▓▓▓▓▓▓▓▓▓▓▓▓░  99%</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前没怎么接触api，最近分析了一下关于GitHub用户的&lt;code&gt;commit&lt;/code&gt;时间，初步得出关于该用户的&lt;code&gt;commit&lt;/code&gt;时间规律等等。（ 事前查了一下，网上大部分关于GitHub上数据分析的文章推荐使用官方提供的api: &lt;a href=&quot;https://developer.github.com/v3/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;GitHub Developer&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://umm233.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="https://umm233.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="https://umm233.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="数据分析" scheme="https://umm233.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Octave安装使用</title>
    <link href="https://umm233.github.io/p/ad444f4c/"/>
    <id>https://umm233.github.io/p/ad444f4c/</id>
    <published>2018-12-14T14:24:41.000Z</published>
    <updated>2019-01-19T09:09:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Matlab开源替代软件————Octave</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>关于Octave的介绍可参考<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvR05VX09jdGF2ZQ==" title="https://zh.wikipedia.org/wiki/GNU_Octave">维基百科<i class="fa fa-external-link"></i></span></p><p>简单来说，就是Matlab的开源替代版。<del>据说，最开始Octave就是按照Matlab搭的模型。</del><br>ps.自带中文包,良心.png<br>pps. Matlab的缺点就是大，安装完十几个G，而Octave安装包只有200多M，安装完，也不过1~2G大小，而且开源免费，支持Linux,Windows,macOS等平台。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>因为它是<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvR05VJUU4JUE4JTg4JUU1JThBJTgz" title="GNU计划">GNU计划<i class="fa fa-external-link"></i></span>的一部分，所以它是<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvR05VJUU5JTgwJTlBJUU3JTk0JUE4JUU1JTg1JUFDJUU1JTg1JUIxJUU4JUFFJUI4JUU1JThGJUFGJUU4JUFGJTgx" title="GNU通用公共许可证">GNU通用公共许可证<i class="fa fa-external-link"></i></span>条款下的<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JTg3JUFBJUU3JTk0JUIxJUU4JUJEJUFGJUU0JUJCJUI2" title="自由软件">自由软件<i class="fa fa-external-link"></i></span>。</p></blockquote><p>官方页面：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9vY3RhdmUv" title="https://www.gnu.org/software/octave/">https://www.gnu.org/software/octave/<i class="fa fa-external-link"></i></span><br>其实还有一个 <span class="exturl" data-url="aHR0cHM6Ly9vY3RhdmUub3JnLw==" title="https://octave.org/">https://octave.org/<i class="fa fa-external-link"></i></span> 但是也是指向 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9vY3RhdmUv" title="https://www.gnu.org/software/octave/">https://www.gnu.org/software/octave/<i class="fa fa-external-link"></i></span></p><p>这里是 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9vY3RhdmUvI2luc3RhbGw=" title="https://www.gnu.org/software/octave/#install">下载链接<i class="fa fa-external-link"></i></span><br>有安装版(<code>.exe</code>)和免安装(<code>zip</code>,<code>7z</code>)，</p><p>Windows用户个人建议选安装版本( <code>.exe</code>) 安装使用，我在用免安装版本总会遇到奇奇怪怪的问题（也不是不能用），要自己多动手配置，查资料解决🙃</p><p>eg：<code>plot</code>函数，在安装版本下，正常能用；<br>而在免安装下，使用<code>plot</code>函数出现未响应</p><blockquote><p><code>plot</code>默认用的是<code>qt</code>图形工具。<br>在Octave命令行中使用<code>graphics_toolkit</code>查询但前使用的图形工具，<code>available_graphics_toolkits</code>查询可用图形工具<br><code>\Octave\share\octave\site\m\startup\octaverc</code>中写入<code>graphics_toolkit(&#39;gnuplot&#39;)</code> 修改图形工具为<code>gnuplot</code><br>ps.修改为<code>fltk</code> 也可以</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>过程中遇到<code>JRE(Java Runtime Environment)</code> 未安装的问题可以先跳过，意思就是，你没有java相关的依赖环境，某些函数操作可能不能使用。等你安装了<code>JRE</code>，就可以使用了相应函数，不需要重新安装。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在大部分语法函数，都与Matlab一样。</p><p><span class="exturl" data-url="aHR0cHM6Ly9vY3RhdmUub3JnL2RvYy8=" title="https://octave.org/doc/">官方参考文档<i class="fa fa-external-link"></i></span><br>ps.也可以参考matlab的，基本上相似。<del>主要是matlab有中文</del>😂</p><p>现学现卖一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x=2:0.2:4;</span><br><span class="line">y=1:0.2:3;</span><br><span class="line">[X,Y]=meshgrid(x,y);% make the grid</span><br><span class="line">Z=(X-3).^2-(Y-2).^2;</span><br><span class="line">subplot(2,2,1);surf(Z);title(&apos;surf&apos;)</span><br><span class="line">subplot(2,2,2);mesh(Z);title(&apos;mesh&apos;)</span><br><span class="line">subplot(2,2,3);meshz(Z);title(&apos;meshz&apos;)</span><br><span class="line">subplot(2,2,4);contour(Z);title(&apos;contour&apos;)</span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="/p/ad444f4c/Octave-test.png" title="Octave运行结果截图"><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在没有太高要求下，Octave是代替Matlab很好的一个工具了<br>ps.丢一个在U盘，随身携带一个Matlab···</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Matlab开源替代软件————Octave&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://umm233.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Software" scheme="https://umm233.github.io/tags/Software/"/>
    
  </entry>
  
  <entry>
    <title>拼图优化</title>
    <link href="https://umm233.github.io/p/6f136742/"/>
    <id>https://umm233.github.io/p/6f136742/</id>
    <published>2018-11-29T07:21:36.000Z</published>
    <updated>2019-01-19T09:22:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情"><a href="#前情" class="headerlink" title="前情"></a>前情</h2><p>之前粗糙写了一个实现根据模板形状拼图的程序，最明显的缺点就是，拼出来形状，但是丢失了原有图片的颜色。<br>然后“基于搜索引擎“优化了一下。主要参考</p><blockquote><p>主要是发现了 <code>Image</code>  库里的 <code>blend</code> 函数 和 <code>composite</code>函数。</p></blockquote><a id="more"></a><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><ul><li>方法一（推荐）</li></ul><blockquote><p><code>blend</code>函数简介<br>定义：Image.blend(image1,image2, alpha) ⇒ image<br>含义：使用给定的两张图像及透明度变量alpha，插值出一张新的图像。这两张图像必须有一样的尺寸和模式。<br>合成公式为：out = image1 _(1.0 - alpha) + image2 _ alpha</p></blockquote><pre><code>im1 = Image.open(&quot;Image1.png&quot;)im2 = Image.open(&quot;Image2.png&quot;)im = Image.blend(im1,im2,0.618)im.save(&quot;pin-pic.png&quot;)</code></pre><blockquote><p>这里0.618是黄金比例值，<del>偷懒随便选的</del></p></blockquote><p>关于参数设置，简单来说，如果变量alpha为0.0，将返回第一张图像的拷贝。如果变量alpha为1.0，将返回第二张图像的拷贝。对变量alpha的值没有限制。<br>这里的话:</p><blockquote><p>如果设置为 0，那么显示<code>Image1.png</code><br>如果设置为 1，那么显示<code>Image2.png</code></p></blockquote><p>效果图：</p><img src="/p/6f136742/tmdu1-12-0.618.png"><ul><li>方法二（不太好看🙃）</li></ul><blockquote><p><code>Composite</code>函数简介<br>定义：Image.composite(image1,image2, mask) ⇒ image<br>含义：使用给定的两张图像及mask图像作为透明度，插值出一张新的图像。变量mask图像的模式可以为“1”，“L”或者“RGBA”。所有图像必须有相同的尺寸。</p></blockquote><pre><code>im1 = Image.open(&quot;Image1.png&quot;)im2 = Image.open(&quot;Image2.png&quot;)# 因为下面要对图像的RGB三通道进行分割，所以这里将格式转换为RGBim1 = im1.convert(&quot;RGB&quot;)im2 = im2.convert(&quot;RGB&quot;)r,g,b = im1.split() # 通道分离print(g.mode)im = Image.composite(im1,im2,g)im.save(&quot;pin-pic.jpg&quot;)b.save(&quot;image-b.jpg&quot;)</code></pre><p>效果图:</p><img src="/p/6f136742/tmdu2-12-b1.png"><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>Image</code>库，博大精深…我只取一粟😂<br>写起来只有这一点点，但是实际测试了很多，之前将图片格式转为RGBA，尝试修改alpha通道，没有效果，不知道那个地方不对，然后测试了许多图片透明化的方法，最后看到一篇文章介绍了<code>Image</code>库的一些具体函数，找到以上两个函数解决。对自己来说，由于对<code>Image</code>库还不够熟悉，兜兜转转，又回到<code>Image</code> …<del>悲伤的故事</del></p><p>不存在的Flag：有空把各部分的函数结构还有固定参数修改一下，做的精细一点，多注意下细节优化和交互体验等等。<del>挖坑</del></p><p>PS.今年时间进度提醒</p><p>今年还剩下 29 天     ▓▓▓▓▓▓▓▓▓▓▓▓▓░░  92%</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2hpbWVpd2FuZ2xpYW5nL3AvNzEzMDQzNC5odG1sJnF1b3Q7" title="https://www.cnblogs.com/chimeiwangliang/p/7130434.html&quot;">第一篇 Python图片处理模块PIL（pillow）<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前情&quot;&gt;&lt;a href=&quot;#前情&quot; class=&quot;headerlink&quot; title=&quot;前情&quot;&gt;&lt;/a&gt;前情&lt;/h2&gt;&lt;p&gt;之前粗糙写了一个实现根据模板形状拼图的程序，最明显的缺点就是，拼出来形状，但是丢失了原有图片的颜色。&lt;br&gt;然后“基于搜索引擎“优化了一下。主要参考&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要是发现了 &lt;code&gt;Image&lt;/code&gt;  库里的 &lt;code&gt;blend&lt;/code&gt; 函数 和 &lt;code&gt;composite&lt;/code&gt;函数。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="图像处理" scheme="https://umm233.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="Python" scheme="https://umm233.github.io/tags/Python/"/>
    
      <category term="图像拼接" scheme="https://umm233.github.io/tags/%E5%9B%BE%E5%83%8F%E6%8B%BC%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>PIL实现图片拼接</title>
    <link href="https://umm233.github.io/p/1e3f5113/"/>
    <id>https://umm233.github.io/p/1e3f5113/</id>
    <published>2018-11-22T04:58:41.000Z</published>
    <updated>2019-01-19T09:08:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>捡起之前想做的图片拼接：刚学Python的时候一个图，将各种图拼起来做成特定的形状，觉得很酷<del>然后刚开始各种百度图片拼接程序</del>，未果。这两天闲下来就想动动手，想给做出来。<br>然后经过一番挣扎，有点丑的做出来了😂<br>效果图如下：(最好模板图片背景是白色的)</p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote><p>将像素点“替换”成图片，设置一个灰度值作为阈值来选择要替换成图片的像素点，然后再新建图里将图片粘贴上去。</p></blockquote><p>PS.思路就是这么简单粗暴</p><h2 id="具体实现："><a href="#具体实现：" class="headerlink" title="具体实现："></a>具体实现：</h2><h3 id="1-读取图片基本信息及改变像素模式"><a href="#1-读取图片基本信息及改变像素模式" class="headerlink" title="1. 读取图片基本信息及改变像素模式"></a><strong>1. 读取图片基本信息及改变像素模式</strong></h3><pre><code>modelImg = Image.open(model_path) # 模板图片im1 = modelImg.resize((500,500)) # 重设modelImg的尺寸print(&quot;修改后模板图像尺寸为: &quot;,im1.size)width,height = im1.size # 模板图片尺寸</code></pre><blockquote><p>刚开始对图像没有什么概念，后来发现一共有九种不同的像素模式，分别是 1，L，P，RGB，RGBA，CMYK，YCbCr，I，F。具体概念可以参考：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ljYW1lcmEwL2FydGljbGUvZGV0YWlscy81MDg0MzE3Mg==" title="https://blog.csdn.net/icamera0/article/details/50843172">Python图像处理库PIL中图像格式转换（一）<i class="fa fa-external-link"></i></span></p></blockquote><p>这里简单起见就选择 <code>L</code> 模式</p><blockquote><p>模式“L”为灰色图像，它的每个像素用8个bit表示，0表示黑，255表示白，其他数字表示不同的灰度。</p></blockquote><p><strong>将图片像素格式统一转换成灰度值，方面后面阈值操作。</strong></p><p>这是一个坑，不同的图片如果直接利用<code>Image</code>库里的<code>getpixel</code>函数就会出现有的时候返回的是RGB,RGBA,P或者L的，每次的像素格式都不一样，传参都麻烦起来。</p><pre><code>im = im1.convert(&quot;L&quot;)</code></pre><h3 id="2-读取模板图片像素值存入数组"><a href="#2-读取模板图片像素值存入数组" class="headerlink" title="2. 读取模板图片像素值存入数组"></a><strong>2. 读取模板图片像素值存入数组</strong></h3><blockquote><p>这一步在改变模式后就很容易实现了。</p></blockquote><pre><code>def openModel(model_path):    modelImg = Image.open(model_path)    im1 = modelImg.resize((500,500)) # 重设模板图片的尺寸，为了避免最后成图顺序出错    print(&quot;修改图像尺寸为: &quot;,im1.size)    width,height = im1.size # 修改后的图片尺寸    # 修改图像模式为:    im = im1.convert(&quot;L&quot;)    print(&quot;修改图像模式为: &quot;,im.mode)    # 读取像素值    array = [] # 存放像素值的列表    # 优化一下采集方式，不是每个点都要采集    # 否则一张100x100的图片，拼接50x50的图片之后的大小会是5000x5000    for x in range(0, width, 10):        for y in range(0, height, 10):            pixel = im.getpixel((x,y)) # 读取像素点灰度值            array.append(pixel)    # print(array)    # print(len(array))    return array</code></pre><h3 id="3-图片拼接"><a href="#3-图片拼接" class="headerlink" title="3. 图片拼接"></a><strong>3. 图片拼接</strong></h3><p>之前的步骤弄好之后，开始拼接，<code>if</code>语句根据设置的阈值简单判断一下，哪些点是要用图片替代的，然后转换成新图相应的坐标，将图片拼接上去就完成了。时间关系，许多地方就没有考虑太仔细，没去做优化。<del>要考试复习，对我现在就是在浪🙃</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    model_path = getImgPath(<span class="number">0</span>)[<span class="number">1</span>]</span><br><span class="line">    print(model_path)</span><br><span class="line">    <span class="comment"># 新建画布</span></span><br><span class="line">    imnew = Image.new(<span class="string">"RGB"</span>, (<span class="number">2500</span>,<span class="number">2500</span>),<span class="string">"#FFFFFF"</span>)</span><br><span class="line">    piclen = <span class="number">1654</span> <span class="comment"># 文件夹下拼接图片数量</span></span><br><span class="line">    array = openModel(model_path) <span class="comment"># 模板像素点数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line">        <span class="keyword">if</span>(i &lt; piclen):</span><br><span class="line">            picI = i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            picI = i<span class="number">-1000</span> <span class="comment"># 这里是图不够了😂</span></span><br><span class="line">        pasteImg = getImgPath(picI)[<span class="number">0</span>] <span class="comment"># 第picI张图片</span></span><br><span class="line">        imgpaste = Image.open(pasteImg).resize((<span class="number">50</span>,<span class="number">50</span>)) <span class="comment"># 统一用于拼接图片的尺寸</span></span><br><span class="line">        <span class="comment"># imgpaste = Image.open(modelImg).resize((50,50))</span></span><br><span class="line">        <span class="comment"># 行 Row 列 Column</span></span><br><span class="line">        row, column = i/<span class="number">50</span>,i%<span class="number">50</span> <span class="comment"># 行列值，相当于图片在新图中的坐标</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="number">10</span> &lt; array[i] &lt; <span class="number">245</span>):</span><br><span class="line">            imnew.paste(imgpaste,(int(row*<span class="number">50</span>), int(column*<span class="number">50</span>)))</span><br><span class="line">            print(<span class="string">"正在拼接第 %d 张图，还剩下 %d 张"</span> %(i,len(array)-i))</span><br><span class="line">            <span class="comment"># print((int(row*50), int(column*50)))</span></span><br><span class="line">    imnew.show()</span><br></pre></td></tr></table></figure><img src="/p/1e3f5113/pintu.png" title="拼图结果"><h3 id="待优化"><a href="#待优化" class="headerlink" title="待优化"></a>待优化</h3><ol><li>颜色分布与原图匹配</li><li>运行速度</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这次呢做出了想要的目标效果，但是很多地方没有异常处理，用老师的话说就是程序不够“壮”(健壮性)</p><p>在思路方面以前最开始没做出出来就是以为那时候想法不对：只想着在原图上将图片直接替换像素点，然后搜索资料的发现也被带偏。后来换个方法，不在原图操作，那我自己重新画一张图出来不就好了 (√)。</p><p>除了思路之外，中间过程的一些地方，文件路径什么的，还是瞎(shi)操(jian)作(jin)<br>处理图像先对图像的基本情况稍作了解，后面会少走许多弯路。</p><p>程序公开在Github上：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VtbTIzMy9TZWVOby9ibG9iL21hc3Rlci9waW5hZGRmaWxlLnB5" title="https://github.com/umm233/SeeNo/blob/master/pinaddfile.py">图片拼接<i class="fa fa-external-link"></i></span></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ljYW1lcmEwL2FydGljbGUvZGV0YWlscy81MDg0MzE3Mg==" title="https://blog.csdn.net/icamera0/article/details/50843172">Python图像处理库PIL中图像格式转换（一）<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ljYW1lcmEwL2FydGljbGUvZGV0YWlscy81MDcwNjYxNQ==" title="https://blog.csdn.net/icamera0/article/details/50706615">Python图像处理库PIL的Image模块介绍（四）<i class="fa fa-external-link"></i></span></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;捡起之前想做的图片拼接：刚学Python的时候一个图，将各种图拼起来做成特定的形状，觉得很酷&lt;del&gt;然后刚开始各种百度图片拼接程序&lt;/del&gt;，未果。这两天闲下来就想动动手，想给做出来。&lt;br&gt;然后经过一番挣扎，有点丑的做出来了😂&lt;br&gt;效果图如下：(最好模板图片背景是白色的)&lt;/p&gt;
    
    </summary>
    
      <category term="图像处理" scheme="https://umm233.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="Python" scheme="https://umm233.github.io/tags/Python/"/>
    
      <category term="图片拼接" scheme="https://umm233.github.io/tags/%E5%9B%BE%E7%89%87%E6%8B%BC%E6%8E%A5/"/>
    
  </entry>
  
</feed>
